



mvn clean test -DskipTests=true


conflits
git stash pop



-----------------
Commands


git config http.sslVerify "false"
git config --global http.sslVerify false





git -c http.sslVerify=false clone  project_url


git branch

git pull origin master

-------------------------------pull request-------
git branch

create own branch before clone of repo

git checkout -b branch_name

git branch

git status (  list out files that has changed)

---add file in commit----
git add pathofFile

git status ( modifided or added file will show in green colour)

.gitignore 


git commit -m "commit_message"

--push local branch
git push origin local_branch_name

open rave autoamtion in git lab -> create merge request -> Assign : assing to shik/prakas-> submit merge request-> ( wait for approval)

-----------------

--latest pull from master--

always s/w to local branch

git pull origin master



--don't want changes
git stash ( The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. )

git stash pop  ( to check conflits)



---generate surefire report 
mvn clean test -DxmlFile="RaveAutomationTest"

--for launch 
File->invalidate caches




gitcommands:-----------------
git clone
git push
git pull
-c http.sslVerify=false
git -c http.sslVerify=false clone
git -c http.sslVerify=false pull 
git checkout -b branch_name

git config --global http.sslVerify false

mvncommands-----------

mvn clean install -Dskiptest
mvn clean compile


mvn -U archetype:generate -DarchetypeGroupId=com.scm.automation -DarchetypeArtifactId=scm-automation-archetype -DarchetypeVersion=3.2.1 -DgroupId=com.scm.automation -Dversion=1.0.0 -DartifactId=scm-automation-rilpractice -DcoreVersion=1.1.7 -DparentVersion=1.0.47 -Dinteractivemode=false -Dmaven.wagon.http.ssl.insecure=true


mvn -U archetype:generate -DarchetypeGroupId=com.scm.automation -DarchetypeArtifactId=scm-automation-archetype -DgroupId=com.scm.automation -Dversion=1.0.0 -DartifactId=scm-automation-rilpractice -DcoreVersion=1.1.7 -DparentVersion=1.0.47 -Dinteractivemode=false -Dmaven.wagon.http.ssl.insecure=true

mvn test -Dtest=TestGroceryCscockpit -Dmaven.surefire.debug=true

mvn test -Dtest=TestGroceryCscockpit#testOrderStatus -Dmaven.surefire.debug=true

git merge --abort

mvn clean install -DskipTests
mvn clean compile test -Dtest={testClassName}#{testCaseName} -DtestcaseId={id in test data yaml}
mvn clean compile test -Dtest={TestGroceryCscockpit}#{testOrderStatus} -DtestcaseId={TC-01}

mvn clean install compile test -Dtest=TestGroceryCscockpit#testOrderStatus -DtestcaseId=TC-01 -Denv=sit -Drp.uuid=1255449c-cf90-48b6-afcb-883e7ec39201 -Drp.launch=scm_grocery_b2b_sit_hybriscscockpit_regression -Drp.attributes=name:Cscockpit;buildId:Local;platform:UI;owner:mahammadmaaz.s@ril.com;type:Component;env:sit;execution:selenoid -Drp.endpoint=http://reportportal.jio.com -Drp.project=scm -Dexecution=selenoid

mvn clean compile

mvn javadoc:fix

mvn checkstyle:check


mvn test -Dfile.name=HybrisGroceryAutomation -Denv_name=SIT





Build.BuildId

mvn test -Dtest=TestGroceryProductCockpit#testProductArticleType -Dmaven.surefire.debug=true


mvn clean compile test -Dtest=TestGroceryProductCockpit#testProductArticleType -Dmaven.surefire.debug=true -Denv=sit -Dexecution=selenoid


mvn clean compile test -Dtest=TestGroceryProductCockpit#testProductOrderingQuantities -Denv=sit -Dexecution=selenoid

mvn clean compile test -Dtest=TestGroceryProductCockpit#testProductOrderingQuantities -Denv=sit -Drp.uuid= -Drp.launch=scm_grocery_b2b_sit_hybrisproductcockpit_regression -Drp.attributes=name:ProductCockpit;buildId:Local;platform:UI;owner:touheed.aslam@ril.com;type:Component;env:sit;execution:selenoid  -Drp.endpoint=http://reportportal.jio.com -Drp.project=scm -Dexecution=selenoid

testProductDiscount


/*
    @Builder.Default private int sleepTimeout = 100;
    @Builder.Default private int scriptTimeout = 60000;
    @Builder.Default private int pageLoadTimeout = 60000;
    @Builder.Default private int implicitlyWait = 5000;
    @Builder.Default private int waitTimeout = 60000;
    @Builder.Default private int waitInterval = 2000;
       */
	   
	   90-2e-16-1f-44-81
	   
clean package -Dfile.name=HybrisGroceryAutomation -Denv_name=sit -Dmaven.wagon.http.ssl.insecure=true; -Drp.project=scm -Drp.uuid -Drp.launch=scm_grocery_b2b_sit_hybris_regression -Drp.attributes=platform:API;type:Component;owner:touheed.aslam@ril.com;name:hybris;buildId:$(Build.BuildId);env:sit;	   
	  
--Hybrisapi
	  
mvn test -Dfile.name=HybrisGroceryAutomation -Denv=sit -Drp.uuid= -Drp.launch=scm_grocery_b2b_sit_hybris_regression -Drp.attributes=name:hybris;platform:API;owner:touheed.aslam@ril.com;type:Component;env:sit; -Drp.endpoint=http://reportportal.jio.com -Drp.project=scm


mvn test -Dfile.name=HybrisGroceryAutomation -Denv=sit 

	   
--hybrisreportportalLaunch-----------------

mvn clean install compile test -Dtest=TestGroceryCscockpit -Denv=sit -Drp.uuid=xxx -Drp.launch=scm_grocery_b2b_sit_hybriscscockpit_regression -Drp.attributes=name:Cscockpit;buildId:Local;platform:UI;owner:mahammadmaaz.s@ril.com;type:Component;env:sit;execution:selenoid -Drp.endpoint=http://reportportal.jio.com -Drp.project=scm -Dexecution=selenoid

mvn clean install compile test -Dtest=TestGroceryProductCockpit -Denv=sit -Drp.uuid=xxxx -Drp.launch=scm_grocery_b2b_sit_hybrisproductcockpit_regression -Drp.attributes=name:ProductCockpit;buildId:Local;platform:UI;owner:touheed.aslam@ril.com;type:Component;env:sit;execution:selenoid  -Drp.endpoint=http://reportportal.jio.com -Drp.project=scm -Dexecution=selenoid

-Dexecution=selenoid
---------------------

Git Committing procedure:
1. git pull origin master => git pull origin master
check if a message says commit or stash due to conflicts 
1a) if u want to lose ur local changes do stash  => git stash
1b) if u want to keep ur changes, check the changes you have made in the project commit window
1c) check the file git status => git status 
1d) add files to git using 
i) project commit window or in terminal command window git add<space>. (dot) => git add. (all files )
ii) git add file_1<space> file_2 => git add file1 file2 etc..
iv)  git commit -m "#azzure_id your_comments" .  Example => git commit -m "#357693 Added Testcases for Article type M and B, fixed related issues in code, files updated"

2) again git pull origin master again => git pull origin master
3) Now check for File changes again in the commit window 
3a) if there are merge issues u need to resolve => click the resolved link -> merge button -> left window ( recent commit changes by u ), middle window ( local changes), and right window ( master branch changes) take required changes in middle window (local changes) 
3b) also validate auto-merged files line by line
4) git status -> git add . or git add required files  -> git commit -m "#azzureId your_comments"
5) push the changes to your local branch => git push origin your_local_branch  Ex. git push origin  #357693_ui_dev
6) Raise a pull request  to PR => open your local branch-> create pull request link -> select reviewer, azureTicketid, add description -> create a link 
7) Inform in code Review channel group in the team to review PR by initiating New Conversation 

Note :
commit your changes and push to the local branch take pull from master to resolve merge conflicts for the files highlighted in red by removing the lines
Ex. Head======================> or brachcommitanmesomevalue====================================>
and push the code to local branch by adding the files to git commit




//add at class
@SuppressWarnings({"LineLength"})

class A{

Indentation
-------------------------------------------------------

---generate surefire report 
mvn clean test -DxmlFile="RaveAutomationTest"
mvn clean test -DxmlFile="SwaddleServiceAutomationRegression"



sql query








mvn test -Dexecution=selenoid


mvn test -Dgroups=orderSearchPositive,orderSearchNegative,customerSearchPositive,customerSearchNegative

Records java doc we need to add
------------
Automation Selenium Work notes

----keyboard action:-------------
this.getAppDriver()
        .setText(this.getPageLocator().sapArticleTypeInput(), String.valueOf(Keys.TAB));		
----current date and time in number--
String currentTimeandDateasRandomNumber = DateTimeFormatter.ofPattern("yyyyMMddHHmmss").format(LocalDateTime.now());

this.getAppDriver().getAction().sendKeys(Keys.TAB).build().perform();



